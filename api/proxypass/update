#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use esmith::ConfigDB;
use esmith::event;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';

my $eventName = undef;
my $ret;
my $exitCode = 0;

my $db = esmith::ConfigDB->open('proxypass');
my $hdb = esmith::ConfigDB->open('hosts');

my $input = readInput();
my $proxyPassName = $input->{'proxypass'}->{'name'};
my $vhostReverseName = $input->{'vhostreverse'}->{'name'};
my $CreateHostRecords = $input->{'vhostreverse'}->{'CreateHostRecords'} || 0;

my %proxypass = (
    'HTTP' => $input->{'proxypass'}->{'HTTP'},
    'Description' => $input->{'proxypass'}->{'Description'},
    'HTTPS' => $input->{'proxypass'}->{'HTTPS'},
    'Target' => $input->{'proxypass'}->{'Target'},
    'ValidFrom' => $input->{'proxypass'}->{'ValidFrom'},
);

my %vhostreverse = (
    'HTTP' => $input->{'vhostreverse'}->{'HTTP'},
    'Description' => $input->{'vhostreverse'}->{'Description'},
    'HTTPS' => $input->{'vhostreverse'}->{'HTTPS'},
    'Target' => $input->{'vhostreverse'}->{'Target'},
    'ValidFrom' => $input->{'vhostreverse'}->{'ValidFrom'},
    'CertVerification' => $input->{'vhostreverse'}->{'CertVerification'},
    'PreserveHost' => $input->{'vhostreverse'}->{'PreserveHost'},
    'SslCertificate' => $input->{'vhostreverse'}->{'SslCertificate'},
);

if($input->{'action'} eq 'create') {
    $eventName = 'nethserver-httpd-save';
    if ($proxyPassName) {
        $db->new_record($proxyPassName, {'type' => 'ProxyPass', %proxypass});
    } elsif ($vhostReverseName) {
        $db->new_record($vhostReverseName, {'type' => 'VhostReverse', %vhostreverse});
        if ($CreateHostRecords == 1) {
            $hdb->new_record($vhostReverseName, {'type' => 'self', 'Description' => ($input->{'vhostreverse'}->{'Description'}|| 'vhost Reverse')});
            esmith::event::event_signal('host-modify', $vhostReverseName);
        }
    }
} elsif($input->{'action'} eq 'delete') {
    $eventName = 'nethserver-httpd-save';
    if ($proxyPassName) {
        $db->set_prop($proxyPassName, 'type', 'proxyPass-deleted');
    } elsif  ($vhostReverseName) {
        $db->set_prop($vhostReverseName, 'type', 'vhostReverse-deleted');
    }
} elsif($input->{'action'} eq 'edit') {
    $eventName = 'nethserver-httpd-save';
    if ($proxyPassName) {
        $db->get($proxyPassName)->merge_props(%proxypass);
    } elsif  ($vhostReverseName) {
        $db->get($vhostReverseName)->merge_props(%vhostreverse);
    }
} else {
    error();
}

esmith::event::set_json_log(1);

if(esmith::event::event_signal($eventName)) {
    $ret = {'state' => 'success'};
    if($input->{'action'} eq 'delete') {
        $db->reload();
        if ($proxyPassName) {
            $db->get($proxyPassName)->delete();
        } elsif ($vhostReverseName) {
            $db->get($vhostReverseName)->delete();
        }
    }
} else {
    $ret = {
        'type' => 'Error',
        'message' => 'proxy.api_update_failed',
        };
    $exitCode = 1;
}

print encode_json($ret);
exit($exitCode);
